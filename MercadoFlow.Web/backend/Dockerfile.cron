# MercadoFlow Background Jobs Dockerfile
FROM node:20-alpine

# Install system dependencies
RUN apk add --no-cache \
    sqlite \
    curl \
    bash \
    tzdata

# Set timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create app directory
WORKDIR /app

# Copy package files and Prisma schema first
COPY package*.json ./
COPY tsconfig.json ./
COPY prisma/ ./prisma/

# Install dependencies
RUN npm install --omit=dev && npm cache clean --force

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY src/ ./src/

# Build application
RUN npm run build

# Create cron job script
COPY <<EOF ./cron-jobs.js
const cron = require('node-cron');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

console.log('🔄 Iniciando sistema de jobs em background...');

// Daily Analytics Job - Every day at 2:00 AM
cron.schedule('0 2 * * *', async () => {
  console.log('📊 Executando job de analytics diárias...');
  try {
    // Import and run daily analytics
    const { DailySalesAnalyticsJob } = require('./dist/jobs/DailySalesAnalyticsJob');
    await DailySalesAnalyticsJob.execute();
    console.log('✅ Job de analytics diárias concluída');
  } catch (error) {
    console.error('❌ Erro no job de analytics diárias:', error);
  }
});

// Weekly Market Basket Job - Every Sunday at 3:00 AM
cron.schedule('0 3 * * 0', async () => {
  console.log('🛒 Executando job de market basket semanal...');
  try {
    const { WeeklyMarketBasketJob } = require('./dist/jobs/WeeklyMarketBasketJob');
    await WeeklyMarketBasketJob.execute();
    console.log('✅ Job de market basket semanal concluída');
  } catch (error) {
    console.error('❌ Erro no job de market basket:', error);
  }
});

// Monthly Seasonal Analysis - First day of month at 4:00 AM
cron.schedule('0 4 1 * *', async () => {
  console.log('📈 Executando job de análise sazonal mensal...');
  try {
    const { MonthlySeasonalAnalysisJob } = require('./dist/jobs/MonthlySeasonalAnalysisJob');
    await MonthlySeasonalAnalysisJob.execute();
    console.log('✅ Job de análise sazonal concluída');
  } catch (error) {
    console.error('❌ Erro no job de análise sazonal:', error);
  }
});

// Alert Generation Job - Every hour
cron.schedule('0 * * * *', async () => {
  console.log('🚨 Executando job de geração de alertas...');
  try {
    const { AlertGenerationJob } = require('./dist/jobs/AlertGenerationJob');
    await AlertGenerationJob.execute();
    console.log('✅ Job de geração de alertas concluída');
  } catch (error) {
    console.error('❌ Erro no job de alertas:', error);
  }
});

// Database Cleanup Job - Every day at 1:00 AM
cron.schedule('0 1 * * *', async () => {
  console.log('🧹 Executando job de limpeza do banco...');
  try {
    // Clean old audit logs (older than 90 days)
    await prisma.auditLog.deleteMany({
      where: {
        createdAt: {
          lt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000)
        }
      }
    });

    // Clean old completed jobs
    // Add your job cleanup logic here

    console.log('✅ Job de limpeza concluída');
  } catch (error) {
    console.error('❌ Erro no job de limpeza:', error);
  }
});

// Health Check Job - Every 5 minutes
cron.schedule('*/5 * * * *', async () => {
  try {
    // Check database connection
    await prisma.$queryRaw\`SELECT 1\`;

    // Log system metrics
    const memUsage = process.memoryUsage();
    console.log(\`💾 Uso de memória: \${Math.round(memUsage.heapUsed / 1024 / 1024)}MB\`);
  } catch (error) {
    console.error('❌ Health check falhou:', error);
  }
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('🛑 Recebido SIGTERM, finalizando jobs...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('🛑 Recebido SIGINT, finalizando jobs...');
  await prisma.$disconnect();
  process.exit(0);
});

console.log('✅ Sistema de jobs iniciado com sucesso!');
EOF

# Remove dev dependencies and source files
RUN npm prune --production && \
    rm -rf src/ tsconfig.json

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S mercadoflow -u 1001

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R mercadoflow:nodejs /app

# Switch to non-root user
USER mercadoflow

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD ps aux | grep -v grep | grep node || exit 1

# Start cron jobs
CMD ["node", "cron-jobs.js"]