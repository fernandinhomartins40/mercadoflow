version: '3.8'

services:
  # nginx - Reverse Proxy & Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: mercadoflow-nginx
    ports:
      - "${NGINX_PORT:-3042}:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - mercadoflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mercadoflow-backend
    ports:
      - "${BACKEND_PORT:-3041}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=file:./data/mercadoflow.db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      - redis
      - db-init
    networks:
      - mercadoflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mercadoflow-frontend
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - frontend_dist:/app/dist
    networks:
      - mercadoflow-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: mercadoflow-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mercadoflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Initialization
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile.db-init
    container_name: mercadoflow-db-init
    environment:
      - DATABASE_URL=file:./data/mercadoflow.db
    volumes:
      - backend_data:/app/data
    networks:
      - mercadoflow-network
    restart: "no"

  # Background Jobs & Analytics
  cron-jobs:
    build:
      context: ./backend
      dockerfile: Dockerfile.cron
    container_name: mercadoflow-cron
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./data/mercadoflow.db
      - REDIS_URL=redis://redis:6379
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - redis
      - backend
    networks:
      - mercadoflow-network
    restart: unless-stopped

  # Monitoring (Optional - Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: mercadoflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mercadoflow-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring Dashboard (Optional - Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: mercadoflow-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - mercadoflow-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mercadoflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16