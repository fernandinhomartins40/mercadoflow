name: 🚀 Deploy MercadoFlow Intelligence - Full Stack

# FORCE CACHE INVALIDATION - MercadoFlow deployment - 2025-09-17T03:15:00Z

concurrency:
  group: mercadoflow-deploy-fullstack
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.108'
  VPS_USER: 'root'
  APP_DIR: '/root/mercadoflow'
  FRONTEND_PORT: '3040'
  BACKEND_PORT: '3041'
  NGINX_PORT: '3042'
  COMPOSE_PROJECT: 'mercadoflow'

jobs:
  deploy:
    name: 🚀 Deploy Full Stack para VPS
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔑 Setup SSH Tools
      run: |
        echo "🔑 Instalando ferramentas SSH..."
        sudo apt-get update -q
        sudo apt-get install -y sshpass
        echo "✅ Ferramentas SSH instaladas"

    - name: 🔍 Pre-Deploy Validation
      run: |
        echo "🔍 Validando estrutura do projeto MercadoFlow FULL STACK..."
        echo "📋 Estrutura principal:"
        ls -la MercadoFlow.Web/ || echo "⚠️ Diretório principal faltando"
        echo "📋 Docker:"
        ls -la MercadoFlow.Web/docker-compose.yml || echo "⚠️ Docker compose faltando"
        echo "📋 Backend:"
        ls -la MercadoFlow.Web/backend/package.json || echo "⚠️ Backend package.json faltando"
        echo "📋 Frontend:"
        ls -la MercadoFlow.Web/frontend/package.json || echo "⚠️ Frontend package.json faltando"

    - name: 📦 Prepare Full Stack Package
      run: |
        echo "📦 Preparando pacote MercadoFlow FULL STACK..."
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Backend: Node.js + SQLite3"
        echo "Frontend: React + Vite + TypeScript"

        # Criar arquivo compacto incluindo backend
        tar --warning=no-file-changed -czf deploy.tar.gz \
          --exclude='.git' \
          --exclude='**/node_modules' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='*.log' \
          --exclude='coverage' \
          --exclude='.env.local' \
          --exclude='MercadoFlow.Web/backend/data' \
          --exclude='MercadoFlow.Desktop' \
          --exclude='backup_before_*' \
          . || true

        echo "📊 Tamanho do pacote MercadoFlow FULL STACK:"
        ls -lh deploy.tar.gz

    - name: 📤 Upload to VPS
      run: |
        echo "📤 Enviando MercadoFlow FULL STACK para VPS..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/

    - name: 🚀 Deploy Full Stack on VPS
      run: |
        echo "🏗️ Executando deploy MercadoFlow FULL STACK na VPS..."
        echo "📋 Informações do deploy:"
        echo "  📦 Commit: ${{ github.sha }}"
        echo "  🌿 Branch: ${{ github.ref_name }}"
        echo "  👤 Actor: ${{ github.actor }}"
        echo "  🕐 Timestamp: $(date -u)"
        echo "  🎯 Stack: Node.js Backend + React Frontend"

        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ConnectTimeout=10 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << DEPLOY_SCRIPT
          set -e

          echo '🚀 Iniciando deploy MercadoFlow FULL STACK - Node.js + React'

          # Configurar sistema
          echo '📦 Configurando VPS...'
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release

          # Parar stack anterior (se existir)
          echo '⏹️ Parando stack anterior...'
          if command -v docker &> /dev/null; then
            # Parar todos os containers do projeto MercadoFlow
            docker compose -p ${{ env.COMPOSE_PROJECT }} down --volumes --remove-orphans 2>/dev/null || true
            docker compose -p mercadoflow down --volumes --remove-orphans 2>/dev/null || true

            # Parar containers específicos se ainda estiverem rodando
            docker stop mercadoflow-backend mercadoflow-frontend mercadoflow-nginx mercadoflow-redis mercadoflow-db-init mercadoflow-cron 2>/dev/null || true
            docker rm -f mercadoflow-backend mercadoflow-frontend mercadoflow-nginx mercadoflow-redis mercadoflow-db-init mercadoflow-cron 2>/dev/null || true

            # Remover TODAS as imagens relacionadas ao projeto
            echo '🗑️ Removendo imagens antigas do MercadoFlow...'
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "(mercadoflow|none)" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

            # Limpeza agressiva de imagens órfãs
            docker image prune -af 2>/dev/null || true

            # Liberar portas específicas forçadamente
            docker ps --filter "publish=${{ env.BACKEND_PORT }}" --format "table {{.ID}}" | tail -n +2 | xargs -r docker stop 2>/dev/null || true
            docker ps --filter "publish=${{ env.FRONTEND_PORT }}" --format "table {{.ID}}" | tail -n +2 | xargs -r docker stop 2>/dev/null || true
            docker ps --filter "publish=${{ env.NGINX_PORT }}" --format "table {{.ID}}" | tail -n +2 | xargs -r docker stop 2>/dev/null || true

            # Limpeza completa do sistema
            docker system prune -af --volumes >/dev/null 2>&1 || true

            echo '✅ Stack anterior parada, imagens antigas removidas e portas liberadas'
          fi

          # Instalar/Atualizar Docker
          echo '🐳 Configurando Docker + Compose...'
          if ! command -v docker &> /dev/null; then
            # Instalar Docker
            apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update -y
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            systemctl start docker && systemctl enable docker
          fi
          docker --version && docker compose version

          # Backup e preparação
          if [ -d '${{ env.APP_DIR }}' ]; then
            echo '💾 Fazendo backup...'
            mv '${{ env.APP_DIR }}' '${{ env.APP_DIR }}.backup.\$(date +%Y%m%d-%H%M%S)' 2>/dev/null || true
          fi

          # Extrair código
          echo '📁 Extraindo MercadoFlow FULL STACK...'
          mkdir -p ${{ env.APP_DIR }} && cd ${{ env.APP_DIR }}
          tar -xzf /tmp/deploy.tar.gz && rm -f /tmp/deploy.tar.gz

          # Navegar para o diretório da aplicação web
          cd MercadoFlow.Web

          # Validar estrutura
          echo '🔍 Validando estrutura MercadoFlow FULL STACK...'
          ls -la docker-compose.yml || { echo '❌ Docker compose faltando!'; exit 1; }
          ls -la backend/package.json || { echo '❌ Backend package.json faltando!'; exit 1; }
          ls -la backend/Dockerfile || { echo '❌ Backend Dockerfile faltando!'; exit 1; }
          ls -la frontend/package.json || { echo '❌ Frontend package.json faltando!'; exit 1; }
          ls -la frontend/Dockerfile || { echo '❌ Frontend Dockerfile faltando!'; exit 1; }

          # Configurar variáveis de produção
          echo '⚙️ Configurando ambiente de produção...'
          echo \"VPS_HOST=${{ env.VPS_HOST }}\" > .env
          echo \"FRONTEND_PORT=${{ env.FRONTEND_PORT }}\" >> .env
          echo \"BACKEND_PORT=${{ env.BACKEND_PORT }}\" >> .env
          echo \"NGINX_PORT=${{ env.NGINX_PORT }}\" >> .env
          echo \"REDIS_PORT=6379\" >> .env
          echo \"JWT_SECRET=mercadoflow-production-jwt-${{ github.sha }}\" >> .env
          echo \"NODE_ENV=production\" >> .env
          echo \"PORT=3000\" >> .env
          echo \"HOST=0.0.0.0\" >> .env
          echo \"REACT_APP_API_BASE_URL=http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}\" >> .env
          echo \"REACT_APP_ENVIRONMENT=production\" >> .env
          echo \"CORS_ORIGIN=http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }},http://localhost:3000,http://localhost:5173\" >> .env
          echo \"DATABASE_URL=file:./data/mercadoflow.db\" >> .env
          echo \"REDIS_URL=redis://redis:6379\" >> .env
          echo \"MAX_FILE_SIZE=50MB\" >> .env
          echo \"RATE_LIMIT_WINDOW_MS=900000\" >> .env
          echo \"RATE_LIMIT_MAX_REQUESTS=100\" >> .env

          # Deploy com Docker Compose
          echo '🐳 Executando deploy com Docker Compose...'
          export BACKEND_PORT=${{ env.BACKEND_PORT }}
          export FRONTEND_PORT=${{ env.FRONTEND_PORT }}
          export NGINX_PORT=${{ env.NGINX_PORT }}
          export REDIS_PORT=6379
          export REACT_APP_API_BASE_URL=http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}
          export JWT_SECRET=mercadoflow-production-jwt-${{ github.sha }}
          export CORS_ORIGIN=http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }},http://localhost:3000

          # Verificar se portas estão realmente livres
          echo '🔍 Verificando portas antes do deploy...'
          for port in ${{ env.BACKEND_PORT }} ${{ env.FRONTEND_PORT }} ${{ env.NGINX_PORT }}; do
            if netstat -tuln | grep -q ":$port "; then
              echo "⚠️ Porta $port ainda ocupada, forçando liberação..."
              fuser -k ${port}/tcp 2>/dev/null || true
              sleep 2
            fi
          done

          # Build e start dos serviços com invalidação forçada de cache
          echo '🏗️ Building imagens com invalidação total de cache...'

          # Remover TODAS as imagens antigas do projeto (novamente por segurança)
          echo '🧹 Limpeza final de imagens antes do build...'
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "(mercadoflow|<none>)" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

          # Limpar completamente cache de build e buildkit
          docker builder prune -af 2>/dev/null || true
          docker buildx prune -af 2>/dev/null || true

          # Forçar remoção de qualquer volume órfão
          docker volume prune -af 2>/dev/null || true

          # Build com cache totalmente limpo e timestamp único
          echo '🔨 Construindo imagens completamente novas...'
          BUILD_TIMESTAMP=\$(date +%s)
          DOCKER_BUILDKIT=1 docker compose -p ${{ env.COMPOSE_PROJECT }} build --no-cache --pull --build-arg BUILD_TIMESTAMP=\$BUILD_TIMESTAMP

          echo '🚀 Iniciando containers...'

          # Tentar start normal primeiro
          if ! docker compose -p ${{ env.COMPOSE_PROJECT }} up -d; then
            echo '⚠️ Falha no start normal, tentando restart forçado...'

            # Restart mais agressivo
            docker compose -p ${{ env.COMPOSE_PROJECT }} down --volumes --remove-orphans 2>/dev/null || true
            docker system prune -af >/dev/null 2>&1 || true

            # Aguardar um pouco
            sleep 10

            # Tentar novamente
            echo '🔄 Tentativa 2: Iniciando containers...'
            docker compose -p ${{ env.COMPOSE_PROJECT }} up -d
          fi

          # Aguardar inicialização
          echo '⏳ Aguardando stack inicializar (60s)...'
          sleep 60

          # Verificar serviços
          echo '🔍 Verificando serviços...'
          docker compose -p ${{ env.COMPOSE_PROJECT }} ps

          # Testar backend
          echo '🔍 Testando backend...'
          for i in {1..12}; do
            if curl -f -s http://localhost:${{ env.BACKEND_PORT }}/api/v1/health >/dev/null 2>&1; then
              echo '✅ Backend health check passou!'
              break
            fi
            echo "Backend - Tentativa \$i/12 - aguardando 5s..."
            sleep 5
          done

          # Testar nginx/proxy
          echo '🔍 Testando nginx...'
          for i in {1..10}; do
            if curl -f -s http://localhost:${{ env.NGINX_PORT }}/health >/dev/null 2>&1; then
              echo '✅ Nginx health check passou!'
              break
            fi
            echo "Nginx - Tentativa \$i/10 - aguardando 5s..."
            sleep 5
          done

          # Verificação final
          echo '🎯 Verificação final...'
          if curl -f -s http://localhost:${{ env.BACKEND_PORT }}/api/v1/health >/dev/null 2>&1 && curl -f -s http://localhost:${{ env.NGINX_PORT }}/ >/dev/null 2>&1; then
            echo '✅ DEPLOY MERCADOFLOW FULL STACK CONCLUÍDO COM SUCESSO!'
            echo '🌐 Frontend: http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }}'
            echo '🔌 Backend API: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}/api/v1'
            echo '🩺 Health: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}/api/v1/health'
          else
            echo '❌ Falha na verificação final!'
            docker compose -p ${{ env.COMPOSE_PROJECT }} logs --tail 20
            exit 1
          fi
        DEPLOY_SCRIPT

    - name: 🎉 Full Stack Deploy Success
      run: |
        echo "🎉 MERCADOFLOW INTELLIGENCE FULL STACK DEPLOYADO!"
        echo "✅ Backend Node.js + Frontend React em produção"
        echo ""
        echo "🔗 LINKS FUNCIONAIS:"
        echo "🌐 Frontend: http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }}"
        echo "🔌 Backend API: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}/api/v1"
        echo "🩺 Health Check: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}/api/v1/health"
        echo "📊 Analytics Dashboard: http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }}/analytics"
        echo "🛍️ Market Intelligence: http://${{ env.VPS_HOST }}:${{ env.NGINX_PORT }}/market"
        echo ""
        echo "✅ Stack Completa:"
        echo "  🎯 Backend: Node.js + Express + SQLite3 + Redis + JWT"
        echo "  🎨 Frontend: React + Vite + TypeScript + TailwindCSS"
        echo "  🐳 Deploy: Docker Compose"
        echo "  📊 Analytics engine com Market Basket Analysis"
        echo "  🛒 Sistema de recomendações inteligentes"
        echo "  🔐 Autenticação JWT segura"
        echo "  🗄️ Dados persistidos em SQLite3 + Redis cache"